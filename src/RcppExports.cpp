// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// dsWrite
void dsWrite(const std::string& fileName);
RcppExport SEXP _ganGenerativeData_dsWrite(SEXP fileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type fileName(fileNameSEXP);
    dsWrite(fileName);
    return R_NilValue;
END_RCPP
}
// dsRead
bool dsRead(const std::string& fileName);
RcppExport SEXP _ganGenerativeData_dsRead(SEXP fileNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type fileName(fileNameSEXP);
    rcpp_result_gen = Rcpp::wrap(dsRead(fileName));
    return rcpp_result_gen;
END_RCPP
}
// dsCreate
void dsCreate(const std::vector<std::wstring>& columnTypes, const std::vector<std::wstring>& columnNames);
RcppExport SEXP _ganGenerativeData_dsCreate(SEXP columnTypesSEXP, SEXP columnNamesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::wstring>& >::type columnTypes(columnTypesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::wstring>& >::type columnNames(columnNamesSEXP);
    dsCreate(columnTypes, columnNames);
    return R_NilValue;
END_RCPP
}
// dsAddValueRow
void dsAddValueRow(const std::vector<std::wstring>& valueVector);
RcppExport SEXP _ganGenerativeData_dsAddValueRow(SEXP valueVectorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::wstring>& >::type valueVector(valueVectorSEXP);
    dsAddValueRow(valueVector);
    return R_NilValue;
END_RCPP
}
// dsDeactivateColumns
void dsDeactivateColumns(const std::vector<int>& columnVector);
RcppExport SEXP _ganGenerativeData_dsDeactivateColumns(SEXP columnVectorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type columnVector(columnVectorSEXP);
    dsDeactivateColumns(columnVector);
    return R_NilValue;
END_RCPP
}
// dsActivateColumns
void dsActivateColumns(const std::vector<int>& columnVector);
RcppExport SEXP _ganGenerativeData_dsActivateColumns(SEXP columnVectorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type columnVector(columnVectorSEXP);
    dsActivateColumns(columnVector);
    return R_NilValue;
END_RCPP
}
// dsGetActiveColumnNames
std::vector<std::wstring> dsGetActiveColumnNames();
RcppExport SEXP _ganGenerativeData_dsGetActiveColumnNames() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dsGetActiveColumnNames());
    return rcpp_result_gen;
END_RCPP
}
// dsGetInactiveColumnNames
std::vector<std::wstring> dsGetInactiveColumnNames();
RcppExport SEXP _ganGenerativeData_dsGetInactiveColumnNames() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dsGetInactiveColumnNames());
    return rcpp_result_gen;
END_RCPP
}
// dsGetNumberOfRows
int dsGetNumberOfRows();
RcppExport SEXP _ganGenerativeData_dsGetNumberOfRows() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dsGetNumberOfRows());
    return rcpp_result_gen;
END_RCPP
}
// dsGetRow
List dsGetRow(int index);
RcppExport SEXP _ganGenerativeData_dsGetRow(SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(dsGetRow(index));
    return rcpp_result_gen;
END_RCPP
}
// dsGetNormalized
bool dsGetNormalized();
RcppExport SEXP _ganGenerativeData_dsGetNormalized() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dsGetNormalized());
    return rcpp_result_gen;
END_RCPP
}
// dsIntCalculateDensityValues
void dsIntCalculateDensityValues(int nNearestNeighbors);
RcppExport SEXP _ganGenerativeData_dsIntCalculateDensityValues(SEXP nNearestNeighborsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nNearestNeighbors(nNearestNeighborsSEXP);
    dsIntCalculateDensityValues(nNearestNeighbors);
    return R_NilValue;
END_RCPP
}
// dsDensityValueInverseQuantile
float dsDensityValueInverseQuantile(float densityValue);
RcppExport SEXP _ganGenerativeData_dsDensityValueInverseQuantile(SEXP densityValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type densityValue(densityValueSEXP);
    rcpp_result_gen = Rcpp::wrap(dsDensityValueInverseQuantile(densityValue));
    return rcpp_result_gen;
END_RCPP
}
// gdReset
void gdReset();
RcppExport SEXP _ganGenerativeData_gdReset() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    gdReset();
    return R_NilValue;
END_RCPP
}
// gdGetDataSourceFileName
std::string gdGetDataSourceFileName();
RcppExport SEXP _ganGenerativeData_gdGetDataSourceFileName() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGetDataSourceFileName());
    return rcpp_result_gen;
END_RCPP
}
// gdGetGenerativeDataFileName
std::string gdGetGenerativeDataFileName();
RcppExport SEXP _ganGenerativeData_gdGetGenerativeDataFileName() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGetGenerativeDataFileName());
    return rcpp_result_gen;
END_RCPP
}
// gdGetBatchSize
int gdGetBatchSize();
RcppExport SEXP _ganGenerativeData_gdGetBatchSize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGetBatchSize());
    return rcpp_result_gen;
END_RCPP
}
// gdGetMaxSize
int gdGetMaxSize();
RcppExport SEXP _ganGenerativeData_gdGetMaxSize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGetMaxSize());
    return rcpp_result_gen;
END_RCPP
}
// gdGetFileName
std::string gdGetFileName(const std::string& fileName);
RcppExport SEXP _ganGenerativeData_gdGetFileName(SEXP fileNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type fileName(fileNameSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGetFileName(fileName));
    return rcpp_result_gen;
END_RCPP
}
// gdCreateGenerativeModel
void gdCreateGenerativeModel();
RcppExport SEXP _ganGenerativeData_gdCreateGenerativeModel() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    gdCreateGenerativeModel();
    return R_NilValue;
END_RCPP
}
// gdWriteWithReadingTrainedModel
void gdWriteWithReadingTrainedModel(const std::string& outFileName);
RcppExport SEXP _ganGenerativeData_gdWriteWithReadingTrainedModel(SEXP outFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type outFileName(outFileNameSEXP);
    gdWriteWithReadingTrainedModel(outFileName);
    return R_NilValue;
END_RCPP
}
// gdReadGenerativeModel
bool gdReadGenerativeModel(const std::string& inFileName);
RcppExport SEXP _ganGenerativeData_gdReadGenerativeModel(SEXP inFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type inFileName(inFileNameSEXP);
    rcpp_result_gen = Rcpp::wrap(gdReadGenerativeModel(inFileName));
    return rcpp_result_gen;
END_RCPP
}
// gdDataSourceRead
void gdDataSourceRead(const std::string& inFileName);
RcppExport SEXP _ganGenerativeData_gdDataSourceRead(SEXP inFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type inFileName(inFileNameSEXP);
    gdDataSourceRead(inFileName);
    return R_NilValue;
END_RCPP
}
// gdGenerativeDataRead
bool gdGenerativeDataRead(const std::string& inFileName);
RcppExport SEXP _ganGenerativeData_gdGenerativeDataRead(SEXP inFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type inFileName(inFileNameSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGenerativeDataRead(inFileName));
    return rcpp_result_gen;
END_RCPP
}
// gdGenerativeDataWrite
void gdGenerativeDataWrite(const std::string& outFileName);
RcppExport SEXP _ganGenerativeData_gdGenerativeDataWrite(SEXP outFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type outFileName(outFileNameSEXP);
    gdGenerativeDataWrite(outFileName);
    return R_NilValue;
END_RCPP
}
// gdWriteSubset
void gdWriteSubset(const std::string& fileName, float percent);
RcppExport SEXP _ganGenerativeData_gdWriteSubset(SEXP fileNameSEXP, SEXP percentSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< float >::type percent(percentSEXP);
    gdWriteSubset(fileName, percent);
    return R_NilValue;
END_RCPP
}
// gdCreateGenerativeData
void gdCreateGenerativeData();
RcppExport SEXP _ganGenerativeData_gdCreateGenerativeData() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    gdCreateGenerativeData();
    return R_NilValue;
END_RCPP
}
// gdCreateDataSourceFromGenerativeModel
void gdCreateDataSourceFromGenerativeModel();
RcppExport SEXP _ganGenerativeData_gdCreateDataSourceFromGenerativeModel() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    gdCreateDataSourceFromGenerativeModel();
    return R_NilValue;
END_RCPP
}
// gdDataSourceGetDataRandom
std::vector<float> gdDataSourceGetDataRandom(int rowCount);
RcppExport SEXP _ganGenerativeData_gdDataSourceGetDataRandom(SEXP rowCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rowCount(rowCountSEXP);
    rcpp_result_gen = Rcpp::wrap(gdDataSourceGetDataRandom(rowCount));
    return rcpp_result_gen;
END_RCPP
}
// gdDataSourceGetNormalizedDataRandom
std::vector<float> gdDataSourceGetNormalizedDataRandom(int rowCount);
RcppExport SEXP _ganGenerativeData_gdDataSourceGetNormalizedDataRandom(SEXP rowCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rowCount(rowCountSEXP);
    rcpp_result_gen = Rcpp::wrap(gdDataSourceGetNormalizedDataRandom(rowCount));
    return rcpp_result_gen;
END_RCPP
}
// gdDataSourceGetNormalizedDataRandomReference
std::vector<float> gdDataSourceGetNormalizedDataRandomReference(int rowCount);
RcppExport SEXP _ganGenerativeData_gdDataSourceGetNormalizedDataRandomReference(SEXP rowCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rowCount(rowCountSEXP);
    rcpp_result_gen = Rcpp::wrap(gdDataSourceGetNormalizedDataRandomReference(rowCount));
    return rcpp_result_gen;
END_RCPP
}
// gdDataSourceGetDataRandomPercent
std::vector<float> gdDataSourceGetDataRandomPercent(float percent);
RcppExport SEXP _ganGenerativeData_gdDataSourceGetDataRandomPercent(SEXP percentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type percent(percentSEXP);
    rcpp_result_gen = Rcpp::wrap(gdDataSourceGetDataRandomPercent(percent));
    return rcpp_result_gen;
END_RCPP
}
// gdGenerativeDataGetDenormalizedDataRandom
std::vector<float> gdGenerativeDataGetDenormalizedDataRandom(float percent);
RcppExport SEXP _ganGenerativeData_gdGenerativeDataGetDenormalizedDataRandom(SEXP percentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type percent(percentSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGenerativeDataGetDenormalizedDataRandom(percent));
    return rcpp_result_gen;
END_RCPP
}
// gdGenerativeDataGetDenormalizedDataRandomWithDensities
std::vector<std::vector<float>> gdGenerativeDataGetDenormalizedDataRandomWithDensities(float percent);
RcppExport SEXP _ganGenerativeData_gdGenerativeDataGetDenormalizedDataRandomWithDensities(SEXP percentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type percent(percentSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGenerativeDataGetDenormalizedDataRandomWithDensities(percent));
    return rcpp_result_gen;
END_RCPP
}
// gdGetDataSourceDimension
int gdGetDataSourceDimension();
RcppExport SEXP _ganGenerativeData_gdGetDataSourceDimension() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGetDataSourceDimension());
    return rcpp_result_gen;
END_RCPP
}
// gdAddValueRows
void gdAddValueRows(const std::vector<float>& valueRows);
RcppExport SEXP _ganGenerativeData_gdAddValueRows(SEXP valueRowsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<float>& >::type valueRows(valueRowsSEXP);
    gdAddValueRows(valueRows);
    return R_NilValue;
END_RCPP
}
// gdGetNumberOfRows
int gdGetNumberOfRows();
RcppExport SEXP _ganGenerativeData_gdGetNumberOfRows() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGetNumberOfRows());
    return rcpp_result_gen;
END_RCPP
}
// gdGetColumnNames
std::vector<std::wstring> gdGetColumnNames(std::vector<int>& indexVector);
RcppExport SEXP _ganGenerativeData_gdGetColumnNames(SEXP indexVectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type indexVector(indexVectorSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGetColumnNames(indexVector));
    return rcpp_result_gen;
END_RCPP
}
// gdGetGenerativeDataDimension
int gdGetGenerativeDataDimension();
RcppExport SEXP _ganGenerativeData_gdGetGenerativeDataDimension() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGetGenerativeDataDimension());
    return rcpp_result_gen;
END_RCPP
}
// gdGetNumberVectorIndexNames
std::vector<std::wstring> gdGetNumberVectorIndexNames(std::vector<int>& numberVectorIndices);
RcppExport SEXP _ganGenerativeData_gdGetNumberVectorIndexNames(SEXP numberVectorIndicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type numberVectorIndices(numberVectorIndicesSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGetNumberVectorIndexNames(numberVectorIndices));
    return rcpp_result_gen;
END_RCPP
}
// gdGetRow
List gdGetRow(int index);
RcppExport SEXP _ganGenerativeData_gdGetRow(SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGetRow(index));
    return rcpp_result_gen;
END_RCPP
}
// gdGetMax
float gdGetMax(int i);
RcppExport SEXP _ganGenerativeData_gdGetMax(SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGetMax(i));
    return rcpp_result_gen;
END_RCPP
}
// gdGetMin
float gdGetMin(int i);
RcppExport SEXP _ganGenerativeData_gdGetMin(SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGetMin(i));
    return rcpp_result_gen;
END_RCPP
}
// gdResetDensitiyValues
void gdResetDensitiyValues();
RcppExport SEXP _ganGenerativeData_gdResetDensitiyValues() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    gdResetDensitiyValues();
    return R_NilValue;
END_RCPP
}
// gdIntCalculateDensityValues
void gdIntCalculateDensityValues();
RcppExport SEXP _ganGenerativeData_gdIntCalculateDensityValues() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    gdIntCalculateDensityValues();
    return R_NilValue;
END_RCPP
}
// gdCalculateDensityValue
float gdCalculateDensityValue(List dataRecord, bool useSearchTree);
RcppExport SEXP _ganGenerativeData_gdCalculateDensityValue(SEXP dataRecordSEXP, SEXP useSearchTreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dataRecord(dataRecordSEXP);
    Rcpp::traits::input_parameter< bool >::type useSearchTree(useSearchTreeSEXP);
    rcpp_result_gen = Rcpp::wrap(gdCalculateDensityValue(dataRecord, useSearchTree));
    return rcpp_result_gen;
END_RCPP
}
// gdDensityValueQuantile
float gdDensityValueQuantile(float percent);
RcppExport SEXP _ganGenerativeData_gdDensityValueQuantile(SEXP percentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type percent(percentSEXP);
    rcpp_result_gen = Rcpp::wrap(gdDensityValueQuantile(percent));
    return rcpp_result_gen;
END_RCPP
}
// gdDensityValueInverseQuantile
float gdDensityValueInverseQuantile(float densityValue);
RcppExport SEXP _ganGenerativeData_gdDensityValueInverseQuantile(SEXP densityValueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type densityValue(densityValueSEXP);
    rcpp_result_gen = Rcpp::wrap(gdDensityValueInverseQuantile(densityValue));
    return rcpp_result_gen;
END_RCPP
}
// gdBuildFileName
std::string gdBuildFileName(const std::string& fileName, float niveau);
RcppExport SEXP _ganGenerativeData_gdBuildFileName(SEXP fileNameSEXP, SEXP niveauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type fileName(fileNameSEXP);
    Rcpp::traits::input_parameter< float >::type niveau(niveauSEXP);
    rcpp_result_gen = Rcpp::wrap(gdBuildFileName(fileName, niveau));
    return rcpp_result_gen;
END_RCPP
}
// gdKNearestNeighbors
List gdKNearestNeighbors(List dataRecord, int k, bool useSearchTree);
RcppExport SEXP _ganGenerativeData_gdKNearestNeighbors(SEXP dataRecordSEXP, SEXP kSEXP, SEXP useSearchTreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dataRecord(dataRecordSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type useSearchTree(useSearchTreeSEXP);
    rcpp_result_gen = Rcpp::wrap(gdKNearestNeighbors(dataRecord, k, useSearchTree));
    return rcpp_result_gen;
END_RCPP
}
// gdComplete
List gdComplete(List dataRecord, bool useSearchTree);
RcppExport SEXP _ganGenerativeData_gdComplete(SEXP dataRecordSEXP, SEXP useSearchTreeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type dataRecord(dataRecordSEXP);
    Rcpp::traits::input_parameter< bool >::type useSearchTree(useSearchTreeSEXP);
    rcpp_result_gen = Rcpp::wrap(gdComplete(dataRecord, useSearchTree));
    return rcpp_result_gen;
END_RCPP
}
// gdGenerativeModelGetNumberOfTrainingIterations
int gdGenerativeModelGetNumberOfTrainingIterations();
RcppExport SEXP _ganGenerativeData_gdGenerativeModelGetNumberOfTrainingIterations() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGenerativeModelGetNumberOfTrainingIterations());
    return rcpp_result_gen;
END_RCPP
}
// gdGenerativeModelSetNumberOfTrainingIterations
void gdGenerativeModelSetNumberOfTrainingIterations(int numberOfTrainingIterations);
RcppExport SEXP _ganGenerativeData_gdGenerativeModelSetNumberOfTrainingIterations(SEXP numberOfTrainingIterationsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numberOfTrainingIterations(numberOfTrainingIterationsSEXP);
    gdGenerativeModelSetNumberOfTrainingIterations(numberOfTrainingIterations);
    return R_NilValue;
END_RCPP
}
// gdGenerativeModelGetNumberOfInitializationIterations
int gdGenerativeModelGetNumberOfInitializationIterations();
RcppExport SEXP _ganGenerativeData_gdGenerativeModelGetNumberOfInitializationIterations() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGenerativeModelGetNumberOfInitializationIterations());
    return rcpp_result_gen;
END_RCPP
}
// gdGenerativeModelSetNumberOfInitializationIterations
void gdGenerativeModelSetNumberOfInitializationIterations(int numberOfInitializationIterations);
RcppExport SEXP _ganGenerativeData_gdGenerativeModelSetNumberOfInitializationIterations(SEXP numberOfInitializationIterationsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numberOfInitializationIterations(numberOfInitializationIterationsSEXP);
    gdGenerativeModelSetNumberOfInitializationIterations(numberOfInitializationIterations);
    return R_NilValue;
END_RCPP
}
// gdGenerativeModelGetNumberOfHiddenLayerUnits
int gdGenerativeModelGetNumberOfHiddenLayerUnits();
RcppExport SEXP _ganGenerativeData_gdGenerativeModelGetNumberOfHiddenLayerUnits() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGenerativeModelGetNumberOfHiddenLayerUnits());
    return rcpp_result_gen;
END_RCPP
}
// gdGenerativeModelSetNumberOfHiddenLayerUnits
void gdGenerativeModelSetNumberOfHiddenLayerUnits(int numberOfHiddenLayerUnits);
RcppExport SEXP _ganGenerativeData_gdGenerativeModelSetNumberOfHiddenLayerUnits(SEXP numberOfHiddenLayerUnitsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type numberOfHiddenLayerUnits(numberOfHiddenLayerUnitsSEXP);
    gdGenerativeModelSetNumberOfHiddenLayerUnits(numberOfHiddenLayerUnits);
    return R_NilValue;
END_RCPP
}
// gdGenerativeModelGetLearningRate
float gdGenerativeModelGetLearningRate();
RcppExport SEXP _ganGenerativeData_gdGenerativeModelGetLearningRate() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGenerativeModelGetLearningRate());
    return rcpp_result_gen;
END_RCPP
}
// gdGenerativeModelSetLearningRate
void gdGenerativeModelSetLearningRate(float learningRate);
RcppExport SEXP _ganGenerativeData_gdGenerativeModelSetLearningRate(SEXP learningRateSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type learningRate(learningRateSEXP);
    gdGenerativeModelSetLearningRate(learningRate);
    return R_NilValue;
END_RCPP
}
// gdGenerativeModelGetDropout
float gdGenerativeModelGetDropout();
RcppExport SEXP _ganGenerativeData_gdGenerativeModelGetDropout() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGenerativeModelGetDropout());
    return rcpp_result_gen;
END_RCPP
}
// gdGenerativeModelSetDropout
void gdGenerativeModelSetDropout(float dropout);
RcppExport SEXP _ganGenerativeData_gdGenerativeModelSetDropout(SEXP dropoutSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< float >::type dropout(dropoutSEXP);
    gdGenerativeModelSetDropout(dropout);
    return R_NilValue;
END_RCPP
}
// gdDataSourceHasActiveStringColumn
bool gdDataSourceHasActiveStringColumn();
RcppExport SEXP _ganGenerativeData_gdDataSourceHasActiveStringColumn() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdDataSourceHasActiveStringColumn());
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ganGenerativeData_dsWrite", (DL_FUNC) &_ganGenerativeData_dsWrite, 1},
    {"_ganGenerativeData_dsRead", (DL_FUNC) &_ganGenerativeData_dsRead, 1},
    {"_ganGenerativeData_dsCreate", (DL_FUNC) &_ganGenerativeData_dsCreate, 2},
    {"_ganGenerativeData_dsAddValueRow", (DL_FUNC) &_ganGenerativeData_dsAddValueRow, 1},
    {"_ganGenerativeData_dsDeactivateColumns", (DL_FUNC) &_ganGenerativeData_dsDeactivateColumns, 1},
    {"_ganGenerativeData_dsActivateColumns", (DL_FUNC) &_ganGenerativeData_dsActivateColumns, 1},
    {"_ganGenerativeData_dsGetActiveColumnNames", (DL_FUNC) &_ganGenerativeData_dsGetActiveColumnNames, 0},
    {"_ganGenerativeData_dsGetInactiveColumnNames", (DL_FUNC) &_ganGenerativeData_dsGetInactiveColumnNames, 0},
    {"_ganGenerativeData_dsGetNumberOfRows", (DL_FUNC) &_ganGenerativeData_dsGetNumberOfRows, 0},
    {"_ganGenerativeData_dsGetRow", (DL_FUNC) &_ganGenerativeData_dsGetRow, 1},
    {"_ganGenerativeData_dsGetNormalized", (DL_FUNC) &_ganGenerativeData_dsGetNormalized, 0},
    {"_ganGenerativeData_dsIntCalculateDensityValues", (DL_FUNC) &_ganGenerativeData_dsIntCalculateDensityValues, 1},
    {"_ganGenerativeData_dsDensityValueInverseQuantile", (DL_FUNC) &_ganGenerativeData_dsDensityValueInverseQuantile, 1},
    {"_ganGenerativeData_gdReset", (DL_FUNC) &_ganGenerativeData_gdReset, 0},
    {"_ganGenerativeData_gdGetDataSourceFileName", (DL_FUNC) &_ganGenerativeData_gdGetDataSourceFileName, 0},
    {"_ganGenerativeData_gdGetGenerativeDataFileName", (DL_FUNC) &_ganGenerativeData_gdGetGenerativeDataFileName, 0},
    {"_ganGenerativeData_gdGetBatchSize", (DL_FUNC) &_ganGenerativeData_gdGetBatchSize, 0},
    {"_ganGenerativeData_gdGetMaxSize", (DL_FUNC) &_ganGenerativeData_gdGetMaxSize, 0},
    {"_ganGenerativeData_gdGetFileName", (DL_FUNC) &_ganGenerativeData_gdGetFileName, 1},
    {"_ganGenerativeData_gdCreateGenerativeModel", (DL_FUNC) &_ganGenerativeData_gdCreateGenerativeModel, 0},
    {"_ganGenerativeData_gdWriteWithReadingTrainedModel", (DL_FUNC) &_ganGenerativeData_gdWriteWithReadingTrainedModel, 1},
    {"_ganGenerativeData_gdReadGenerativeModel", (DL_FUNC) &_ganGenerativeData_gdReadGenerativeModel, 1},
    {"_ganGenerativeData_gdDataSourceRead", (DL_FUNC) &_ganGenerativeData_gdDataSourceRead, 1},
    {"_ganGenerativeData_gdGenerativeDataRead", (DL_FUNC) &_ganGenerativeData_gdGenerativeDataRead, 1},
    {"_ganGenerativeData_gdGenerativeDataWrite", (DL_FUNC) &_ganGenerativeData_gdGenerativeDataWrite, 1},
    {"_ganGenerativeData_gdWriteSubset", (DL_FUNC) &_ganGenerativeData_gdWriteSubset, 2},
    {"_ganGenerativeData_gdCreateGenerativeData", (DL_FUNC) &_ganGenerativeData_gdCreateGenerativeData, 0},
    {"_ganGenerativeData_gdCreateDataSourceFromGenerativeModel", (DL_FUNC) &_ganGenerativeData_gdCreateDataSourceFromGenerativeModel, 0},
    {"_ganGenerativeData_gdDataSourceGetDataRandom", (DL_FUNC) &_ganGenerativeData_gdDataSourceGetDataRandom, 1},
    {"_ganGenerativeData_gdDataSourceGetNormalizedDataRandom", (DL_FUNC) &_ganGenerativeData_gdDataSourceGetNormalizedDataRandom, 1},
    {"_ganGenerativeData_gdDataSourceGetNormalizedDataRandomReference", (DL_FUNC) &_ganGenerativeData_gdDataSourceGetNormalizedDataRandomReference, 1},
    {"_ganGenerativeData_gdDataSourceGetDataRandomPercent", (DL_FUNC) &_ganGenerativeData_gdDataSourceGetDataRandomPercent, 1},
    {"_ganGenerativeData_gdGenerativeDataGetDenormalizedDataRandom", (DL_FUNC) &_ganGenerativeData_gdGenerativeDataGetDenormalizedDataRandom, 1},
    {"_ganGenerativeData_gdGenerativeDataGetDenormalizedDataRandomWithDensities", (DL_FUNC) &_ganGenerativeData_gdGenerativeDataGetDenormalizedDataRandomWithDensities, 1},
    {"_ganGenerativeData_gdGetDataSourceDimension", (DL_FUNC) &_ganGenerativeData_gdGetDataSourceDimension, 0},
    {"_ganGenerativeData_gdAddValueRows", (DL_FUNC) &_ganGenerativeData_gdAddValueRows, 1},
    {"_ganGenerativeData_gdGetNumberOfRows", (DL_FUNC) &_ganGenerativeData_gdGetNumberOfRows, 0},
    {"_ganGenerativeData_gdGetColumnNames", (DL_FUNC) &_ganGenerativeData_gdGetColumnNames, 1},
    {"_ganGenerativeData_gdGetGenerativeDataDimension", (DL_FUNC) &_ganGenerativeData_gdGetGenerativeDataDimension, 0},
    {"_ganGenerativeData_gdGetNumberVectorIndexNames", (DL_FUNC) &_ganGenerativeData_gdGetNumberVectorIndexNames, 1},
    {"_ganGenerativeData_gdGetRow", (DL_FUNC) &_ganGenerativeData_gdGetRow, 1},
    {"_ganGenerativeData_gdGetMax", (DL_FUNC) &_ganGenerativeData_gdGetMax, 1},
    {"_ganGenerativeData_gdGetMin", (DL_FUNC) &_ganGenerativeData_gdGetMin, 1},
    {"_ganGenerativeData_gdResetDensitiyValues", (DL_FUNC) &_ganGenerativeData_gdResetDensitiyValues, 0},
    {"_ganGenerativeData_gdIntCalculateDensityValues", (DL_FUNC) &_ganGenerativeData_gdIntCalculateDensityValues, 0},
    {"_ganGenerativeData_gdCalculateDensityValue", (DL_FUNC) &_ganGenerativeData_gdCalculateDensityValue, 2},
    {"_ganGenerativeData_gdDensityValueQuantile", (DL_FUNC) &_ganGenerativeData_gdDensityValueQuantile, 1},
    {"_ganGenerativeData_gdDensityValueInverseQuantile", (DL_FUNC) &_ganGenerativeData_gdDensityValueInverseQuantile, 1},
    {"_ganGenerativeData_gdBuildFileName", (DL_FUNC) &_ganGenerativeData_gdBuildFileName, 2},
    {"_ganGenerativeData_gdKNearestNeighbors", (DL_FUNC) &_ganGenerativeData_gdKNearestNeighbors, 3},
    {"_ganGenerativeData_gdComplete", (DL_FUNC) &_ganGenerativeData_gdComplete, 2},
    {"_ganGenerativeData_gdGenerativeModelGetNumberOfTrainingIterations", (DL_FUNC) &_ganGenerativeData_gdGenerativeModelGetNumberOfTrainingIterations, 0},
    {"_ganGenerativeData_gdGenerativeModelSetNumberOfTrainingIterations", (DL_FUNC) &_ganGenerativeData_gdGenerativeModelSetNumberOfTrainingIterations, 1},
    {"_ganGenerativeData_gdGenerativeModelGetNumberOfInitializationIterations", (DL_FUNC) &_ganGenerativeData_gdGenerativeModelGetNumberOfInitializationIterations, 0},
    {"_ganGenerativeData_gdGenerativeModelSetNumberOfInitializationIterations", (DL_FUNC) &_ganGenerativeData_gdGenerativeModelSetNumberOfInitializationIterations, 1},
    {"_ganGenerativeData_gdGenerativeModelGetNumberOfHiddenLayerUnits", (DL_FUNC) &_ganGenerativeData_gdGenerativeModelGetNumberOfHiddenLayerUnits, 0},
    {"_ganGenerativeData_gdGenerativeModelSetNumberOfHiddenLayerUnits", (DL_FUNC) &_ganGenerativeData_gdGenerativeModelSetNumberOfHiddenLayerUnits, 1},
    {"_ganGenerativeData_gdGenerativeModelGetLearningRate", (DL_FUNC) &_ganGenerativeData_gdGenerativeModelGetLearningRate, 0},
    {"_ganGenerativeData_gdGenerativeModelSetLearningRate", (DL_FUNC) &_ganGenerativeData_gdGenerativeModelSetLearningRate, 1},
    {"_ganGenerativeData_gdGenerativeModelGetDropout", (DL_FUNC) &_ganGenerativeData_gdGenerativeModelGetDropout, 0},
    {"_ganGenerativeData_gdGenerativeModelSetDropout", (DL_FUNC) &_ganGenerativeData_gdGenerativeModelSetDropout, 1},
    {"_ganGenerativeData_gdDataSourceHasActiveStringColumn", (DL_FUNC) &_ganGenerativeData_gdDataSourceHasActiveStringColumn, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_ganGenerativeData(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
