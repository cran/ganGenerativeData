// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// dsWrite
void dsWrite(const std::string& outFileName);
RcppExport SEXP _ganGenerativeData_dsWrite(SEXP outFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type outFileName(outFileNameSEXP);
    dsWrite(outFileName);
    return R_NilValue;
END_RCPP
}
// dsRead
void dsRead(const std::string& inFileName);
RcppExport SEXP _ganGenerativeData_dsRead(SEXP inFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type inFileName(inFileNameSEXP);
    dsRead(inFileName);
    return R_NilValue;
END_RCPP
}
// dsCreate
void dsCreate(const std::vector<std::wstring>& columnTypes, const std::vector<std::wstring>& columnNames);
RcppExport SEXP _ganGenerativeData_dsCreate(SEXP columnTypesSEXP, SEXP columnNamesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::wstring>& >::type columnTypes(columnTypesSEXP);
    Rcpp::traits::input_parameter< const std::vector<std::wstring>& >::type columnNames(columnNamesSEXP);
    dsCreate(columnTypes, columnNames);
    return R_NilValue;
END_RCPP
}
// dsAddValueRow
void dsAddValueRow(const std::vector<std::wstring>& valueVector);
RcppExport SEXP _ganGenerativeData_dsAddValueRow(SEXP valueVectorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::wstring>& >::type valueVector(valueVectorSEXP);
    dsAddValueRow(valueVector);
    return R_NilValue;
END_RCPP
}
// dsDeactivateColumns
void dsDeactivateColumns(const std::vector<int>& columnVector);
RcppExport SEXP _ganGenerativeData_dsDeactivateColumns(SEXP columnVectorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type columnVector(columnVectorSEXP);
    dsDeactivateColumns(columnVector);
    return R_NilValue;
END_RCPP
}
// dsActivateColumns
void dsActivateColumns(const std::vector<int>& columnVector);
RcppExport SEXP _ganGenerativeData_dsActivateColumns(SEXP columnVectorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<int>& >::type columnVector(columnVectorSEXP);
    dsActivateColumns(columnVector);
    return R_NilValue;
END_RCPP
}
// dsGetActiveColumnNames
std::vector<std::wstring> dsGetActiveColumnNames();
RcppExport SEXP _ganGenerativeData_dsGetActiveColumnNames() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dsGetActiveColumnNames());
    return rcpp_result_gen;
END_RCPP
}
// dsGetInactiveColumnNames
std::vector<std::wstring> dsGetInactiveColumnNames();
RcppExport SEXP _ganGenerativeData_dsGetInactiveColumnNames() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dsGetInactiveColumnNames());
    return rcpp_result_gen;
END_RCPP
}
// dsGetNumberOfRows
int dsGetNumberOfRows();
RcppExport SEXP _ganGenerativeData_dsGetNumberOfRows() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dsGetNumberOfRows());
    return rcpp_result_gen;
END_RCPP
}
// dsGetRow
List dsGetRow(int index);
RcppExport SEXP _ganGenerativeData_dsGetRow(SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(dsGetRow(index));
    return rcpp_result_gen;
END_RCPP
}
// dsGetNormalized
bool dsGetNormalized();
RcppExport SEXP _ganGenerativeData_dsGetNormalized() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(dsGetNormalized());
    return rcpp_result_gen;
END_RCPP
}
// gdReset
void gdReset();
RcppExport SEXP _ganGenerativeData_gdReset() {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    gdReset();
    return R_NilValue;
END_RCPP
}
// gdGetDataSourceFileName
std::string gdGetDataSourceFileName();
RcppExport SEXP _ganGenerativeData_gdGetDataSourceFileName() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGetDataSourceFileName());
    return rcpp_result_gen;
END_RCPP
}
// gdGetGenerativeDataFileName
std::string gdGetGenerativeDataFileName();
RcppExport SEXP _ganGenerativeData_gdGetGenerativeDataFileName() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGetGenerativeDataFileName());
    return rcpp_result_gen;
END_RCPP
}
// gdGetBatchSize
int gdGetBatchSize();
RcppExport SEXP _ganGenerativeData_gdGetBatchSize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGetBatchSize());
    return rcpp_result_gen;
END_RCPP
}
// gdGetMaxSize
int gdGetMaxSize();
RcppExport SEXP _ganGenerativeData_gdGetMaxSize() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGetMaxSize());
    return rcpp_result_gen;
END_RCPP
}
// gdDataSourceRead
void gdDataSourceRead(const std::string& inFileName);
RcppExport SEXP _ganGenerativeData_gdDataSourceRead(SEXP inFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type inFileName(inFileNameSEXP);
    gdDataSourceRead(inFileName);
    return R_NilValue;
END_RCPP
}
// gdGenerativeDataRead
void gdGenerativeDataRead(const std::string& inFileName);
RcppExport SEXP _ganGenerativeData_gdGenerativeDataRead(SEXP inFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type inFileName(inFileNameSEXP);
    gdGenerativeDataRead(inFileName);
    return R_NilValue;
END_RCPP
}
// gdGenerativeDataWrite
void gdGenerativeDataWrite(const std::string& outFileName);
RcppExport SEXP _ganGenerativeData_gdGenerativeDataWrite(SEXP outFileNameSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type outFileName(outFileNameSEXP);
    gdGenerativeDataWrite(outFileName);
    return R_NilValue;
END_RCPP
}
// gdDataSourceGetDataRandom
std::vector<float> gdDataSourceGetDataRandom(int rowCount);
RcppExport SEXP _ganGenerativeData_gdDataSourceGetDataRandom(SEXP rowCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rowCount(rowCountSEXP);
    rcpp_result_gen = Rcpp::wrap(gdDataSourceGetDataRandom(rowCount));
    return rcpp_result_gen;
END_RCPP
}
// gdDataSourceGetNormalizedDataRandom
std::vector<float> gdDataSourceGetNormalizedDataRandom(int rowCount);
RcppExport SEXP _ganGenerativeData_gdDataSourceGetNormalizedDataRandom(SEXP rowCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rowCount(rowCountSEXP);
    rcpp_result_gen = Rcpp::wrap(gdDataSourceGetNormalizedDataRandom(rowCount));
    return rcpp_result_gen;
END_RCPP
}
// gdGenerativeDataGetNormalizedDataRandom
std::vector<float> gdGenerativeDataGetNormalizedDataRandom(int rowCount);
RcppExport SEXP _ganGenerativeData_gdGenerativeDataGetNormalizedDataRandom(SEXP rowCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rowCount(rowCountSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGenerativeDataGetNormalizedDataRandom(rowCount));
    return rcpp_result_gen;
END_RCPP
}
// gdGenerativeDataGetDenormalizedDataRandom
std::vector<float> gdGenerativeDataGetDenormalizedDataRandom(int rowCount);
RcppExport SEXP _ganGenerativeData_gdGenerativeDataGetDenormalizedDataRandom(SEXP rowCountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type rowCount(rowCountSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGenerativeDataGetDenormalizedDataRandom(rowCount));
    return rcpp_result_gen;
END_RCPP
}
// gdGetDataSourceDimension
int gdGetDataSourceDimension();
RcppExport SEXP _ganGenerativeData_gdGetDataSourceDimension() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGetDataSourceDimension());
    return rcpp_result_gen;
END_RCPP
}
// gdAddValueRows
void gdAddValueRows(const std::vector<float>& valueRows);
RcppExport SEXP _ganGenerativeData_gdAddValueRows(SEXP valueRowsSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<float>& >::type valueRows(valueRowsSEXP);
    gdAddValueRows(valueRows);
    return R_NilValue;
END_RCPP
}
// gdGetNumberOfRows
int gdGetNumberOfRows();
RcppExport SEXP _ganGenerativeData_gdGetNumberOfRows() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGetNumberOfRows());
    return rcpp_result_gen;
END_RCPP
}
// gdGetColumnNames
std::vector<std::wstring> gdGetColumnNames(std::vector<int>& indexVector);
RcppExport SEXP _ganGenerativeData_gdGetColumnNames(SEXP indexVectorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type indexVector(indexVectorSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGetColumnNames(indexVector));
    return rcpp_result_gen;
END_RCPP
}
// gdGetGenerativeDataDimension
int gdGetGenerativeDataDimension();
RcppExport SEXP _ganGenerativeData_gdGetGenerativeDataDimension() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(gdGetGenerativeDataDimension());
    return rcpp_result_gen;
END_RCPP
}
// gdGetNumberVectorIndexNames
std::vector<std::wstring> gdGetNumberVectorIndexNames(std::vector<int>& numberVectorIndices);
RcppExport SEXP _ganGenerativeData_gdGetNumberVectorIndexNames(SEXP numberVectorIndicesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<int>& >::type numberVectorIndices(numberVectorIndicesSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGetNumberVectorIndexNames(numberVectorIndices));
    return rcpp_result_gen;
END_RCPP
}
// gdGetRow
List gdGetRow(int index);
RcppExport SEXP _ganGenerativeData_gdGetRow(SEXP indexSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type index(indexSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGetRow(index));
    return rcpp_result_gen;
END_RCPP
}
// gdGetMax
float gdGetMax(int i);
RcppExport SEXP _ganGenerativeData_gdGetMax(SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGetMax(i));
    return rcpp_result_gen;
END_RCPP
}
// gdGetMin
float gdGetMin(int i);
RcppExport SEXP _ganGenerativeData_gdGetMin(SEXP iSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    rcpp_result_gen = Rcpp::wrap(gdGetMin(i));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ganGenerativeData_dsWrite", (DL_FUNC) &_ganGenerativeData_dsWrite, 1},
    {"_ganGenerativeData_dsRead", (DL_FUNC) &_ganGenerativeData_dsRead, 1},
    {"_ganGenerativeData_dsCreate", (DL_FUNC) &_ganGenerativeData_dsCreate, 2},
    {"_ganGenerativeData_dsAddValueRow", (DL_FUNC) &_ganGenerativeData_dsAddValueRow, 1},
    {"_ganGenerativeData_dsDeactivateColumns", (DL_FUNC) &_ganGenerativeData_dsDeactivateColumns, 1},
    {"_ganGenerativeData_dsActivateColumns", (DL_FUNC) &_ganGenerativeData_dsActivateColumns, 1},
    {"_ganGenerativeData_dsGetActiveColumnNames", (DL_FUNC) &_ganGenerativeData_dsGetActiveColumnNames, 0},
    {"_ganGenerativeData_dsGetInactiveColumnNames", (DL_FUNC) &_ganGenerativeData_dsGetInactiveColumnNames, 0},
    {"_ganGenerativeData_dsGetNumberOfRows", (DL_FUNC) &_ganGenerativeData_dsGetNumberOfRows, 0},
    {"_ganGenerativeData_dsGetRow", (DL_FUNC) &_ganGenerativeData_dsGetRow, 1},
    {"_ganGenerativeData_dsGetNormalized", (DL_FUNC) &_ganGenerativeData_dsGetNormalized, 0},
    {"_ganGenerativeData_gdReset", (DL_FUNC) &_ganGenerativeData_gdReset, 0},
    {"_ganGenerativeData_gdGetDataSourceFileName", (DL_FUNC) &_ganGenerativeData_gdGetDataSourceFileName, 0},
    {"_ganGenerativeData_gdGetGenerativeDataFileName", (DL_FUNC) &_ganGenerativeData_gdGetGenerativeDataFileName, 0},
    {"_ganGenerativeData_gdGetBatchSize", (DL_FUNC) &_ganGenerativeData_gdGetBatchSize, 0},
    {"_ganGenerativeData_gdGetMaxSize", (DL_FUNC) &_ganGenerativeData_gdGetMaxSize, 0},
    {"_ganGenerativeData_gdDataSourceRead", (DL_FUNC) &_ganGenerativeData_gdDataSourceRead, 1},
    {"_ganGenerativeData_gdGenerativeDataRead", (DL_FUNC) &_ganGenerativeData_gdGenerativeDataRead, 1},
    {"_ganGenerativeData_gdGenerativeDataWrite", (DL_FUNC) &_ganGenerativeData_gdGenerativeDataWrite, 1},
    {"_ganGenerativeData_gdDataSourceGetDataRandom", (DL_FUNC) &_ganGenerativeData_gdDataSourceGetDataRandom, 1},
    {"_ganGenerativeData_gdDataSourceGetNormalizedDataRandom", (DL_FUNC) &_ganGenerativeData_gdDataSourceGetNormalizedDataRandom, 1},
    {"_ganGenerativeData_gdGenerativeDataGetNormalizedDataRandom", (DL_FUNC) &_ganGenerativeData_gdGenerativeDataGetNormalizedDataRandom, 1},
    {"_ganGenerativeData_gdGenerativeDataGetDenormalizedDataRandom", (DL_FUNC) &_ganGenerativeData_gdGenerativeDataGetDenormalizedDataRandom, 1},
    {"_ganGenerativeData_gdGetDataSourceDimension", (DL_FUNC) &_ganGenerativeData_gdGetDataSourceDimension, 0},
    {"_ganGenerativeData_gdAddValueRows", (DL_FUNC) &_ganGenerativeData_gdAddValueRows, 1},
    {"_ganGenerativeData_gdGetNumberOfRows", (DL_FUNC) &_ganGenerativeData_gdGetNumberOfRows, 0},
    {"_ganGenerativeData_gdGetColumnNames", (DL_FUNC) &_ganGenerativeData_gdGetColumnNames, 1},
    {"_ganGenerativeData_gdGetGenerativeDataDimension", (DL_FUNC) &_ganGenerativeData_gdGetGenerativeDataDimension, 0},
    {"_ganGenerativeData_gdGetNumberVectorIndexNames", (DL_FUNC) &_ganGenerativeData_gdGetNumberVectorIndexNames, 1},
    {"_ganGenerativeData_gdGetRow", (DL_FUNC) &_ganGenerativeData_gdGetRow, 1},
    {"_ganGenerativeData_gdGetMax", (DL_FUNC) &_ganGenerativeData_gdGetMax, 1},
    {"_ganGenerativeData_gdGetMin", (DL_FUNC) &_ganGenerativeData_gdGetMin, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_ganGenerativeData(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
